import json

import telebot
from telebot import types

from config import *
from message_types import *

bot = telebot.TeleBot(bot_token)


@bot.message_handler(commands=['start', 'send', 'load'])
def start(message):
    print(f'@{message.from_user.username}({message.from_user.id}) –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É: {message.text}')
    if message.from_user.id == admin_id:
        print(f'@{message.from_user.username}({message.from_user.id}) —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º')
        bot.reply_to(message, text='–í—ã –∞–¥–º–∏–Ω\n'
                                   '–ü–æ–∫–∞ —á—Ç–æ /start –∞–¥–º–∏–Ω–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç üòâ')
    else:
        print(f'@{message.from_user.username}({message.from_user.id}) —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º —é–∑–µ—Ä–æ–º')
        # bot.reply_to(message, text=f'–í—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n'
        #                           f'–í–∞—à –∞–π–¥–∏: {message.from_user.id}')
        input_mess_text = bot.send_message(message.chat.id, text='üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
        bot.register_next_step_handler(input_mess_text, input_message)


def input_message(message):
    original_chat_id = message.chat.id
    user_callback_data = json.dumps({'action': 'reply_by_user', 'chat_id': original_chat_id})
    callback_data = json.dumps({'action': 'reply', 'chat_id': original_chat_id})

    kb_for_admin = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text='üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=callback_data)
    kb_for_admin.add(button1)

    kb_for_user = types.InlineKeyboardMarkup()
    button2 = types.InlineKeyboardButton(text='üí¨ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=user_callback_data)
    kb_for_user.add(button2)

    print(f'@{message.from_user.username}({message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type}')
    if message.content_type == 'text':  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        print(f'@{message.from_user.username}({message.from_user.id}) –Ω–∞–ø–∏—Å–∞–ª: {message.text}')

        bot.send_message(admin_id, text=f'id —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{message.message_id}</code>\n'
                                        f'id —á–∞—Ç–∞: <code>{message.chat.id}</code>\n'
                                        f'@{message.from_user.username}(<code>{message.from_user.id}</code>) –Ω–∞–ø–∏—Å–∞–ª:\n'
                                        f'<b>{message.text}</b>', reply_markup=kb_for_admin, parse_mode='HTML')
        bot.send_message(message.chat.id, text='‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', reply_markup=kb_for_user)


    elif message.content_type == 'photo':  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id

        if message.caption:
            mess_capt = message.caption
        else:
            mess_capt = ' '

        print(
            f'@{message.from_user.username}({message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.caption if message.caption else "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"}')
        bot.send_photo(admin_id, file_id, caption=f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{message.from_user.username}({message.from_user.id})\n'
                                                  f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{mess_capt}</b>', parse_mode='HTML')
        bot.send_message(message.chat.id, text='‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', reply_markup=kb_for_user)



    elif message.content_type in supported_comment_types:  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        try:
            mess_capt = message.caption if message.caption else ' '

            if message.content_type in requires_file_id:
                print('1')
                file_id = eval(f'message.{message.content_type}.file_id')

                print(
                    f'@{message.from_user.username}({message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª {supported_comment_types[message.content_type]}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.caption if message.caption else "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"}')
                eval(f'bot.send_{message.content_type}(admin_id, file_id, \
                       caption=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{message.from_user.username}({message.from_user.id})\\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{mess_capt}</b>", parse_mode="HTML")')


            else:

                print(
                    f'@{message.from_user.username}({message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª {supported_comment_types[message.content_type]}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.caption if message.caption else "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"}')
                eval(f'bot.send_{message.content_type}(admin_id, message.chat.id, \
                                   caption=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{message.from_user.username}({message.from_user.id})\\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{mess_capt}</b>", parse_mode="HTML")')

            bot.send_message(message.chat.id, text='‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', reply_markup=kb_for_user)

        except Exception as e:
            bot.send_message(message.chat.id, text='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                                   f'‚ùì {e}')
            print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')



    elif message.content_type in unsupported_comment_types:  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        try:

            if message.content_type in requires_file_id:

                file_id = eval(f'message.{message.content_type}.file_id')

                print(
                    f'@{message.from_user.username}({message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª {unsupported_comment_types[message.content_type]}')
                eval(
                    f'bot.send_message(admin_id, text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{message.from_user.username}({message.from_user.id})\\n{unsupported_comment_types[message.content_type]}:")')
                eval(f'bot.send_{message.content_type}(admin_id, file_id)')


            else:
                print(
                    f'@{message.from_user.username}({message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª {unsupported_comment_types[message.content_type]}')
                eval(
                    f'bot.send_message(admin_id, text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{message.from_user.username}({message.from_user.id})\\n{unsupported_comment_types[message.content_type]}:")')
                eval(f'bot.send_{message.content_type}(admin_id, message_id)')

            bot.send_message(message.chat.id, text='‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', reply_markup=kb_for_user)

        except Exception as e:
            bot.send_message(message.chat.id, text='‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n'
                                                   f'‚ùì {e}')
            print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

    else:
        print(
            f'@{message.from_user.username}({message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª {message.content_type}, –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
        bot.send_message(message.chat.id, text=f'‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π({message.content_type}) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    data = json.loads(call.data)

    original_chat_id = data['chat_id']
    if data['action'] == 'reply_by_user':
        input_mess = bot.send_message(original_chat_id, text='üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
        bot.register_next_step_handler(input_mess, input_message)


    elif data['action'] == 'reply':
        text = bot.send_message(admin_id, text='üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞')
        bot.register_next_step_handler(text, send_reply, original_chat_id)


def send_reply(message, original_chat_id):
    reply_text = message.text
    print(f'–ê–¥–º–∏–Ω –≤–≤–µ–ª –æ—Ç–≤–µ—Ç: {reply_text}')

    try:
        bot.send_message(original_chat_id, f'–ê–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª: {reply_text}')
        print(f'–°–æ–æ–±—â–µ–Ω–∏–µ "{reply_text}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        bot.send_message(message.chat.id, text='‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')

    except Exception as e:
        print(f'–°–æ–æ–±—â–µ–Ω–∏–µ "{reply_text}" –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ : {e}')

        if '403' in str(e):
            bot.send_message(message.chat.id, text='‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n'
                                                   '‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞')
        else:
            bot.send_message(message.chat.id, text='‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n'
                                                   f'‚ùì {e}')


if __name__ == "__main__":
    bot.polling()